# Load necessary libraries
library(imager)
library(keras)
library(tensorflow)

# Load the original model
model <- load_model_tf("/Users/abby/Desktop/A2P2/dandelion_model")

# Define size of images and color channels
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3

# Load test image
img_path <- "/Users/abby/Desktop/A2P2/dandelions/636597665741397587-dandelion-1097518082.jpg"
img <- load.image(img_path)

# Define transformation parameters
scale <- 0.1
rotation <- pi/4
shear <- pi/8

# Apply the transformation to the image
transformation <- list(scale = scale, rotation = rotation, shear = shear)
transformed_img <- imager::affine(img, transformation)

# Preprocess the transformed image
transformed_img <- array_reshape(transformed_img, c(1, dim(transformed_img)))
transformed_img <- imagenet_preprocess_input(transformed_img)

# Make a prediction on the transformed image
pred <- predict(model, transformed_img, batch_size = 1)

# Print the predicted class probabilities for the original and transformed images
print("Original image probabilities:")
print(predict(model, img, batch_size = 1))
print("Transformed image probabilities:")
print(pred)
